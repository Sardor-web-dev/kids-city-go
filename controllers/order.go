package controllers

import (
	"bytes"
	"encoding/json" // ‚Üê –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω—É–∂–Ω–∞
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid" // üß© –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É
	"io"
	"kids-city-go/config"
	"kids-city-go/models"
	"net/http"
)

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
func CreateOrder(c *gin.Context) {
	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å json.RawMessage
	body, err := c.GetRawData()
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
	c.Request.Body = io.NopCloser(bytes.NewBuffer(body))

	// –ü–∞—Ä—Å–∏–º JSON –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Order
	var input models.Order
	if err := json.Unmarshal(body, &input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"})
		return
	}

	// –î–æ—Å—Ç–∞—ë–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	userIDVal, exists := c.Get("userId") // ‚Üê –∞ —Ç—É—Ç —Ç—ã –µ–≥–æ –¥–æ—Å—Ç–∞—ë—à—å

	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId"})
		return
	}

	userID, ok := userIDVal.(int)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "userId –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞"})
		return
	}
	fmt.Println("–ü–æ–ª—É—á–µ–Ω userID:", userID)

	// –†–∞—Å–ø–∞—Ä—Å–∏–º Items –∏–∑ RawMessage
	var items []map[string]interface{}
	if err := json.Unmarshal(input.Items, &items); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ items"})
		return
	}

	// –ü–æ–¥—Å—á—ë—Ç total
	total := 0
	for _, item := range items {
		qty, okQty := item["quantity"].(float64)
		price, okPrice := item["price"].(float64)
		if okQty && okPrice {
			total += int(qty * price)
		}
	}
	input.Total = total

	input.ID = uuid.NewString()
	input.UserID = int(userID)

	if err := config.DB.Create(&input).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"})
		return
	}

	fmt.Println("RAW BODY:", string(body))
	fmt.Printf("–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: %+v\n", input)
	c.JSON(http.StatusCreated, gin.H{"success": true, "order": input})
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetUserOrders(c *gin.Context) {
	userIDVal, exists := c.Get("userId")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId"})
		return
	}

	userID, ok := userIDVal.(int)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "userId –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞"})
		return
	}
	fmt.Println("–ü–æ–ª—É—á–µ–Ω userID:", userID)

	var orders []models.Order
	if err := config.DB.
		Where("user_id = ?", userID).
		Order("created_at desc").
		Find(&orders).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"orders": orders})
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (admin only)
func UpdateOrderStatus(c *gin.Context) {
	orderID := c.Param("id")
	var input struct {
		Status string `json:"status"`
	}

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	validStatuses := map[string]bool{
		"process":  true,
		"done":     true,
		"canceled": true,
	}

	if !validStatuses[input.Status] {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å"})
		return
	}

	if err := config.DB.Model(&models.Order{}).
		Where("id = ?", orderID).
		Update("status", input.Status).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"success": true})
}
